class Solution(object):
    def myAtoi(self, s):
        """
        :type s: str
        :rtype: int
        """
        s = s.lstrip()
        if not s:
            return 0
        res = []
        signed = 1
        i = 0
        if s[i] in ["-", "+"]:
            if s[i] == "-":
                signed = -1
            i += 1
        
        while i < len(s) and s[i].isdigit():
            res.append(s[i])
            i += 1

        if not res:
            return 0
        
        num = int("".join(res))* signed
        INT_MIN, INT_MAX = -2**31, 2**31 - 1
        return max(INT_MIN, min(num, INT_MAX))
        

class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        s = s.split()
        s = s[::-1]
        return ' '.join(s)

class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        if len(s) < len(p):
            return []

        res = []
        count_s, count_p = defaultdict(int),defaultdict(int)

        for i in range(len(p)):
            count_p[p[i]] += 1
            count_s[s[i]] += 1
        
        l, r = 0, len(p)

        if count_s == count_p:
            res.append(l)
        
        while r < len(s):
            out = s[l]
            in_ = s[r]

            count_s[out] -=1

            if count_s[out] == 0:
                del count_s[out]

            count_s[in_] += 1

            if count_s == count_p:
                res.append(l + 1)

            l += 1
            r += 1

        return res          
